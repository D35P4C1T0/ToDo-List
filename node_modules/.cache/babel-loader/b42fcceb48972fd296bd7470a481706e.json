{"ast":null,"code":"import _objectSpread from \"/home/matteo/Documents/Programmazione/progettiRubati/ToDo-List---React/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/matteo/Documents/Programmazione/progettiRubati/ToDo-List---React/src/Components/ListMain.js\";\n\n/* \nDescription: Main Parent - Holds main state and handles all edited, deleting, and addition of items\n*/\n//editbutton - passes in an on click handler which toggles a itemsArr property called editing\n//If editing = true then SingleToDo shows an input instead of the lineitem\n//The input feeds into a setState on ListMain that does the same thing as linethrough example but instead changes itemsArr.obj.item\n//\nimport React, { Component } from \"react\";\nimport Form from \"./Form.js\";\nimport SingleToDo from \"./SingleTodo.js\"; // import \"./style/style.css\"\n\nimport \"./style/dark.min.css\";\n\nclass ListMain extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itemsArr: []\n    };\n    this.addItem = this.addItem.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleComplete = this.handleComplete.bind(this);\n    this.handleEditClick = this.handleEditClick.bind(this);\n    this.editItem = this.editItem.bind(this);\n  } //Adds an item to the state.itemsArr\n\n\n  addItem(newItem) {\n    this.setState(state => ({\n      itemsArr: [...state.itemsArr, newItem]\n    }));\n  } //Edits an existing item\n\n\n  editItem(editedItem) {\n    const editedItemsArr = this.state.itemsArr.map(obj => obj.id === editedItem.id ? _objectSpread({}, obj, {\n      item: editedItem.item,\n      editing: !obj.editing\n    }) : obj);\n    this.setState({\n      itemsArr: editedItemsArr\n    });\n  } //Adds strikethrough text upon clicking line-item\n\n\n  handleComplete(id) {\n    const newItemsArr = this.state.itemsArr.map(obj => obj.id === id ? _objectSpread({}, obj, {\n      complete: !obj.complete\n    }) : obj);\n    this.setState({\n      itemsArr: newItemsArr\n    });\n  } //not sure if this should be connected to its grandchild directly or if all info should go through the parent\n\n\n  handleEditClick(id) {\n    const editedItemsArr = this.state.itemsArr.map(obj => obj.id === id ? _objectSpread({}, obj, {\n      editing: !obj.editing\n    }) : obj);\n    this.setState({\n      itemsArr: editedItemsArr\n    });\n  } //Removes a line-item upon clicking the trash icon\n\n\n  handleDelete(id) {\n    this.setState({\n      itemsArr: this.state.itemsArr.filter(obj => obj.id !== id)\n    });\n  }\n\n  render() {\n    //index -- used to create the ordered numbers on line-items\n    //item -- is used to store the todo string\n    //id -- unique indicator of this item\n    //complete -- tracks whether the line-item should have strikethrough text or not\n    //editing -- tracks whether the line item is being edited\n    //handleDelete -- handles the removal of a line-item\n    //handles the strikethrough text boolean\n    const items = this.state.itemsArr.map((obj, index) => React.createElement(SingleToDo, {\n      key: obj.id //pretty sure I can just pass the whole object in here and not rewrite everything\n      ,\n      index: index,\n      item: obj.item,\n      id: obj.id,\n      complete: obj.complete,\n      editing: obj.editing,\n      handleDelete: this.handleDelete,\n      handleComplete: this.handleComplete,\n      handleEditClick: this.handleEditClick,\n      editItem: this.editItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"To-Do List: \"), React.createElement(Form, {\n      addItem: this.addItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"itemsGrid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, items));\n  }\n\n}\n\nexport default ListMain;","map":{"version":3,"sources":["/home/matteo/Documents/Programmazione/progettiRubati/ToDo-List---React/src/Components/ListMain.js"],"names":["React","Component","Form","SingleToDo","ListMain","constructor","props","state","itemsArr","addItem","bind","handleDelete","handleComplete","handleEditClick","editItem","newItem","setState","editedItem","editedItemsArr","map","obj","id","item","editing","newItemsArr","complete","filter","render","items","index"],"mappings":"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","sourcesContent":["/* \nDescription: Main Parent - Holds main state and handles all edited, deleting, and addition of items\n*/\n\n//editbutton - passes in an on click handler which toggles a itemsArr property called editing\n//If editing = true then SingleToDo shows an input instead of the lineitem\n//The input feeds into a setState on ListMain that does the same thing as linethrough example but instead changes itemsArr.obj.item\n//\nimport React, { Component } from \"react\"\nimport Form from \"./Form.js\"\nimport SingleToDo from \"./SingleTodo.js\"\n// import \"./style/style.css\"\nimport \"./style/dark.min.css\"\n\nclass ListMain extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      itemsArr: []\n    }\n    this.addItem = this.addItem.bind(this)\n    this.handleDelete = this.handleDelete.bind(this)\n    this.handleComplete = this.handleComplete.bind(this)\n    this.handleEditClick = this.handleEditClick.bind(this)\n    this.editItem = this.editItem.bind(this)\n  }\n\n  //Adds an item to the state.itemsArr\n  addItem(newItem) {\n    this.setState(state => ({ itemsArr: [...state.itemsArr, newItem] }))\n  }\n  //Edits an existing item\n  editItem(editedItem) {\n    const editedItemsArr = this.state.itemsArr.map(obj =>\n      obj.id === editedItem.id\n        ? { ...obj, item: editedItem.item, editing: !obj.editing }\n        : obj\n    )\n    this.setState({ itemsArr: editedItemsArr })\n  }\n\n  //Adds strikethrough text upon clicking line-item\n  handleComplete(id) {\n    const newItemsArr = this.state.itemsArr.map(obj =>\n      obj.id === id ? { ...obj, complete: !obj.complete } : obj\n    )\n    this.setState({ itemsArr: newItemsArr })\n  }\n\n  //not sure if this should be connected to its grandchild directly or if all info should go through the parent\n  handleEditClick(id) {\n    const editedItemsArr = this.state.itemsArr.map(obj =>\n      obj.id === id ? { ...obj, editing: !obj.editing } : obj\n    )\n    this.setState({ itemsArr: editedItemsArr })\n  }\n\n  //Removes a line-item upon clicking the trash icon\n  handleDelete(id) {\n    this.setState({\n      itemsArr: this.state.itemsArr.filter(obj => obj.id !== id)\n    })\n  }\n\n  render() {\n    //index -- used to create the ordered numbers on line-items\n    //item -- is used to store the todo string\n    //id -- unique indicator of this item\n    //complete -- tracks whether the line-item should have strikethrough text or not\n    //editing -- tracks whether the line item is being edited\n    //handleDelete -- handles the removal of a line-item\n    //handles the strikethrough text boolean\n    const items = this.state.itemsArr.map((obj, index) => (\n      <SingleToDo\n        key={obj.id}\n        //pretty sure I can just pass the whole object in here and not rewrite everything\n        index={index}\n        item={obj.item}\n        id={obj.id}\n        complete={obj.complete}\n        editing={obj.editing}\n        handleDelete={this.handleDelete}\n        handleComplete={this.handleComplete}\n        handleEditClick={this.handleEditClick}\n        editItem={this.editItem}\n      />\n    ))\n\n    return (\n      <div>\n        <div className=\"header\">\n          <h1>To-Do List: </h1>\n          <Form addItem={this.addItem} />\n        </div>\n        <div className=\"itemsGrid\">{items}</div>\n      </div>\n    )\n  }\n}\n\nexport default ListMain\n"]},"metadata":{},"sourceType":"module"}